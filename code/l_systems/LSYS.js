/**
 * @author AdamTavares / http://adamtavares.com
*/
var LSYS = LSYS || { REVISION: '1' }
LSYS.Sys = function( _iter, _angle, _start ) {

	this.iter = _iter;      	// {int} The total number of iterations.
	this.angle = _angle;     	// {float} The angle.
	this.start = _start;    	// {string} The starting state
	this.rules = {};    		// {object} The rules of the L-System. 
	
	//------------------------------------------------------------
	//  Generated by the program
	//------------------------------------------------------------
	this.n = 0;         		// {int}  The current iteration.
	this.drawing = this.start;	// {string} The string which becomes a drawing with the help of a renderer
	
	//------------------------------------------------------------
	//  Everything after the 3rd parameter is a rule
	//------------------------------------------------------------
	for ( var i=3; i<arguments.length; i++ ) {
		var map = arguments[i].split('=');
		this.rules[map[0]] = map[1];
	}
	
	console.log( this.rules );
	
	return {
		
		/**
		 *	Run the system the specified # of times i.e. this.iter
		 */
		go: function() {
			while( this.n < this.iter ) {
				this.next();
				this.n++;
			}
		},
		
		/**
		 *  Apply the next rule
		 */
		next: function() {
			//------------------------------------------------------------
			//  Apply next rule
			//------------------------------------------------------------
			var letters = this.drawing.split('');
			for ( var i in letters ) {
				if ( letters[i] in this.rules ) {
					letters[i] = this.rules[ letters[i] ];
				}
			}
			this.drawing = letters.join('');
		},
		
		draw: function( _renderer, _technique ) {
			//------------------------------------------------------------
			//  TODO: check to see if renderer is valid...
			//------------------------------------------------------------
			_renderer.draw( this.drawing, this.angle );
		},
		
		//------------------------------------------------------------
		//  Expose variables you'll need
		//------------------------------------------------------------
		n: this.n,
		rules: this.rules,
		iter: this.iter,
		drawing: this.drawing
	}
}



LSYS.Renderer = function( _canvasId ) {
	this.canvas = document.getElementById( _canvasId );
	this.RAD = Math.PI/180.0;
	this.ANTICLOCK  = '+';
	this.CLOCKWISE  = '-';
	this.PUSH       = '[';
	this.POP        = ']';
	this.COLOR     = 'C';
}



//------------------------------------------------------------
//  2D renderer class
//------------------------------------------------------------
LSYS.TwoD = function( _canvasId ){
	LSYS.Renderer.call( this, _canvasId );
	this.ctx = this.canvas.getContext('2d');
	
	return {
		draw: function( _drawing, _angle ) {
			
		}
	}
}
LSYS.TwoD.prototype = Object.create( LSYS.Renderer.prototype );



//------------------------------------------------------------
//  3D renderer class
//------------------------------------------------------------
LSYS.ThreeD = function(){
	return {
		draw: function( _drawing, _angle ) {}
	}
}
LSYS.ThreeD.prototype = Object.create( LSYS.Renderer.prototype );

//------------------------------------------------------------
// Stuff to investigate.
//------------------------------------------------------------
// semi-Thue grammar
// Chomsky hierarchy
// L-systems are now commonly known as parametric L systems.
// G = ( V, w, P )